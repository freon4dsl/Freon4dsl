typer

// What are types?
istype { Type, TypeDeclaration }

// Which concepts have a type?
hastype { Exp }

// What are the top and bottom types?
anytype {
    conformsto PredefinedType:ANY; // PredefinedType:ANY is the least specific type
}

PredefinedType {
    OtherPredefinedType:NULL conformsto NULL; // PredefinedType:NULL is the most specific type
}

// Which type does an expression have?
SimpleExp1 {
    infertype PredefinedType:Simple1;
}

SimpleExp2 {
    infertype PredefinedType:Simple2;
}

NamedExp {
    infertype self.myType;
}

PlusExp {
    infertype commonSuperType(self.left, self. right);
}

UnitLiteral {
    // 62 kilogram, or 112 miles
    infertype UnitOfMeasurement  {
                  base: typeof(self.inner),
                  unit: self.unit
              };
}

GenericLiteral {
    // Set{ 12, 14, 16, 18 }
    infertype GenericType {
        innerType: typeof(self.content),
        kind: self.kind
    };
}

// Which types are 'equal' to each other?
SimpleType {
    equalsto self.type;
}

NamedType {
    equalsto aa:NamedType where {
            aa.name equalsto self.name;
        };
}

GenericType {
    equalsto x:GenericType where {
            x.innerType equalsto self.innerType;
            x.kind equalsto self.kind;
        };
    conformsto x:GenericType where {
            // both conditions must be true
            self.innerType conformsto x.innerType;
            self.kind conformsto typeof(x.kind).name;
        };
}

GenericKind {
    Set conformsto Collection;
    Sequence conformsto Bag;
    Bag conformsto Collection;
    // Collection;
}

UnitOfMeasurement {
    equalsto aap:UnitOfMeasurement where {
            aap.baseType equalsto self.baseType;
            aap.unit equalsto self.unit;
        };
    conformsto rr:UnitOfMeasurement where {
            self.baseType conformsto rr.baseType;
            self.unit equalsto rr.unit;
        };
}

//OrType { // represents "one of", e.g. string|string[]
//    conformsto rr:OrType where {
//        rr conformsto oneOf(rr.inners)
//    }
//}
//
//anytype {
//    conformsto rr:AndType where {
//        self conformsto allOf(rr.inners)
//    }
//}
//
//AndType { // represents "all of", e.g. Comparable&Serializable
//    conformsto rr:AndType where {
//        rr conformsto allOf(self.inners)
//    }
//}
