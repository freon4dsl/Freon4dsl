// 2. all props defined in a classifier should be different from the props of its super concepts/interfaces
//      except when their types conform, then props of the sub should be marked 'implementedInBase' - but only if
//      base is a concept

// this test ...
language YYYY
model Y {
    name: identifier;
    unit: Yunit;
}

modelunit Yunit {
    name: identifier;
    part1: Right;
    part2: Wrong1;
}

// combi Base2, Base5, Base6 is correct
concept Right implements Base2, Base5, Base6 {
}

// combi Base2, Base3 is incorrect
concept Wrong1 implements Base2, Base3 {
}

// combi Base2, Base4 is incorrect
concept Wrong2 implements Base2, Base4 {
}

interface Base2  {
    name1: boolean;
    name2: Type1;
    reference name3: Type2;
    name4: Type3;
}

interface Base5 {
    name1: boolean;
    name2: SuperType1;
    reference name3: SuperType2;
    name4: SuperType3;
}

interface Base6 {
    name1: boolean;
    name2: SuperSuperType1;
    reference name3: SuperSuperType2;
    name4: SuperSuperType3;
}

interface Base3 {
    name1: string;
    name2: Type3;
    reference name3: Type1;
    name4: Type2;
}

interface Base4 {
    name1: identifier;
    name2: SuperType2;
    reference name3: SuperType1;
    name4: SuperType2;
}

concept Type1 base SuperType1 {
    name: identifier;
}

concept Type2 base SuperType2 {
    name: identifier;
}

concept Type3 base SuperType3 {
    name: identifier;
}

concept SuperType1 base SuperSuperType1 {
    name: identifier;
}

concept SuperType2 base SuperSuperType2 {
    name: identifier;
}

concept SuperType3 base SuperSuperType3 {
    name: identifier;
}

concept SuperSuperType1 {
    name: identifier;
}

concept SuperSuperType2 {
    name: identifier;
}

concept SuperSuperType3 {
    name: identifier;
}
