language test1 // without 'implements'

model ROOT {
    name: identifier;
    aa: AAAAAA[];
}

modelunit AAAAAA  {
    name: identifier;
    // the possibilities for primitive properties
    AAprop1: string;
    AAprop2: string[];
    AAprop3: number;
    AAprop4: number[];
    AAprop5: boolean;
    AAprop6: boolean[];
    // properties with concept as type
    AAprop7: BB;
    AAprop8: BB[];
    reference AAprop9: CC;
    reference AAprop10: CC[];
    // properties with interface as type
    AAprop11: DD;
    AAprop12: DD[];
    reference AAprop13: FF;
    reference AAprop14: FF[];
}

concept BB base CC {
    // the possibilities for primitive properties
    BBprop1: string;
    BBprop2: string[];
    BBprop3: number;
    BBprop4: number[];
    BBprop5: boolean;
    BBprop6: boolean[];
    // properties with concept as type
    BBprop7?: BB;
    BBprop8: BB[];
    reference BBprop9: CC;
    reference BBprop10: CC[];
    // properties with interface as type
    BBprop11?: DD;
    BBprop12: DD[];
    reference BBprop13: FF;
    reference BBprop14: FF[];
    // properties with limited concept as type
    BBprop15: ZZ;
    BBprop16: ZZ[];
    reference BBprop17: ZZ;
    reference BBprop18: ZZ[];
}

concept CC {
    name: identifier; // so that this concept can be used as reference
    // the possibilities for primitive properties
    CCprop1: string;
    CCprop2: string[];
    CCprop3: number;
    CCprop4: number[];
    CCprop5: boolean;
    CCprop6: boolean[];
    // properties with concept as type
    CCprop7?: BB;
    CCprop8: BB[];
    reference CCprop9: CC;
    reference CCprop10: CC[];
    // properties with interface as type
    CCprop11?: DD;
    CCprop12: DD[];
    reference CCprop13: FF;
    reference CCprop14: FF[];
}

limited ZZ {
    name: identifier;
    // the possibilities for primitive properties
    ZZprop1: string;
    ZZprop2: string[];
    ZZprop3: number;
    ZZprop4: number[];
    ZZprop5: boolean;
    ZZprop6: boolean[];
    ZZinstance1 = { name: "ZZinstance1", ZZprop1: "sometext" }
    // properties with concept as type
/*    ZZprop7: BB;
    ZZprop8: BB[];
    reference ZZprop9: CC;
    reference ZZprop10: CC[];
    // properties with interface as type
    ZZprop11: DD;
    ZZprop12: DD[];
    reference ZZprop13: FF;
    reference ZZprop14: FF[];
    */
}

interface DD base EE {
    // the possibilities for primitive properties
    DDprop1: string;
    DDprop2: string[];
    DDprop3: number;
    DDprop4: number[];
    DDprop5: boolean;
    DDprop6: boolean[];
    // properties with concept as type
    DDprop7?: BB;
    DDprop8: BB[];
    reference DDprop9: CC;
    reference DDprop10: CC[];
    // properties with interface as type
    DDprop11?: DD;
    DDprop12: DD[];
    reference DDprop13: FF;
    reference DDprop14: FF[];
}

interface EE base FF {
    // the possibilities for primitive properties
    EEprop1: string;
    EEprop2: string[];
    EEprop3: number;
    EEprop4: number[];
    EEprop5: boolean;
    EEprop6: boolean[];
    // properties with concept as type
    EEprop7?: BB;
    EEprop8: BB[];
    reference EEprop9: CC;
    reference EEprop10: CC[];
    // properties with interface as type
    EEprop11?: DD;
    EEprop12: DD[];
    reference EEprop13: FF;
    reference EEprop14: FF[];
}

interface FF {
    name: identifier; // so that this interface can be used as reference
    // the possibilities for primitive properties
    FFprop1: string;
    FFprop2: string[];
    FFprop3: number;
    FFprop4: number[];
    FFprop5: boolean;
    FFprop6: boolean[];
    // properties with concept as type
    FFprop7?: BB;
    FFprop8: BB[];
    reference FFprop9: CC;
    reference FFprop10: CC[];
    // properties with interface as type
    FFprop11?: DD;
    FFprop12: DD[];
    reference FFprop13: FF;
    reference FFprop14: FF[];
}

