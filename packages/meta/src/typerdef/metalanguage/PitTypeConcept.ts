// Generated by the ProjectIt Language Generator.
import { PiConcept, PiConceptProperty, PiPrimitiveProperty, PiPrimitiveType } from "../../languagedef/metalanguage";
import { PitProperty } from "./PitProperty";

/**
 * Class PitTypeConcept is the implementation of the concept with the same name in the language definition file.
 */
export class PitTypeConcept extends PiConcept {
    /**
     * A convenience method that creates an instance of this class
     * based on the properties defined in 'data'.
     * @param data
     */
    static create(data: Partial<PitTypeConcept>): PitTypeConcept {
        const result = new PitTypeConcept();
        if (!!data.name) {
            result.name = data.name;
        }
        if (!!data.properties) {
            data.properties.forEach(x => {
                if (x instanceof PitProperty) {
                    if (x.typeReference.name === 'boolean' || x.typeReference.name === 'number' || x.typeReference.name === 'string') {
                        const newProp: PiPrimitiveProperty = new PiPrimitiveProperty();
                        newProp.name = x.name;
                        newProp.typeReference = x.typeReference;
                        result.primProperties.push(newProp);
                    } else {
                        result.properties.push(x);
                    }
                }
            });
        }
        if (!!data.base) {
            result.base = data.base;
        }
        // if (!!data.__base) {
        //     result.__base = data.__base;
        // }
        if (!!data.location) {
            result.location = data.location;
        }
        if (data.agl_location) {
            result.agl_location = data.agl_location;
        }
        return result;
    }

    readonly $typename: string = "PitTypeConcept"; // holds the metatype in the form of a string

    toPiString(): string {
        return 'type ' + this.name + (!!this.base ? 'base ' + this.base.name : '') + " {\n\t" +
            this.properties.map(p => p.toPiString()).join(";\n\t") + "\n} "
    }

    parts(): PiConceptProperty[] {
        return this.properties.filter(prop => !(prop.type instanceof PiPrimitiveType)) as PiConceptProperty[];
    }
}
