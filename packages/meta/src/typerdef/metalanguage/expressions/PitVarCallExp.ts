// Generated by the ProjectIt Language Generator.
import { PitExp } from "./PitExp";
import { PiClassifier, PiElementReference } from "../../../languagedef/metalanguage";
import { PitVarDecl } from "../PitVarDecl";

/**
 * Class PitVarCallExp is the implementation of the concept with the same name in the language definition file.
 * It uses mobx decorators to enable parts of the language environment, e.g. the editor, to react
 * to changes in the state of its properties.
 */
export class PitVarCallExp extends PitExp {
    /**
     * A convenience method that creates an instance of this class
     * based on the properties defined in 'data'.
     * @param data
     */
    static create(data: Partial<PitVarCallExp>): PitVarCallExp {
        const result = new PitVarCallExp();
        if (!!data.__variable) {
            result.__variable = data.__variable;
        }
        return result;
    }

    readonly $typename: string = "PitVarCallExp"; // holds the metatype in the form of a string
    __variable: PiElementReference<PitVarDecl>; // implementation of reference 'variable'

    /**
     * Convenience method for reference 'variable'.
     * Instead of returning a 'PiElementReference<PitVarDecl>' object,
     * it returns the referred 'PitVarDecl' object, if it can be found.
     */
    get variable(): PitVarDecl {
        if (!!this.__variable) {
            return this.__variable.referred;
        }
        return null;
    }

    set variable(newOne: PitVarDecl) {
        if (!!newOne) {
            this.__variable = PiElementReference.create<PitVarDecl>(newOne, "PitVarDecl");
            // this.__variable.owner = this;
        }
    }

    toPiString(): string {
        return this.__variable.name;
    }

    baseSource(): PitExp {
        return this;
    }
}
