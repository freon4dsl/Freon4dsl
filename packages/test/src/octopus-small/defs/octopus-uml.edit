editor default 

UmlPart {
        [${self.umlPackage}]
}

// the uml concepts
Association {
        [${self.end1} <-> ${self.end2}]
}

AssociationClass {
        [
        [?${self.visibility}] <associationclass> ${self.name}
        ${self.end1} <-> ${self.end2}
            [?<attributes> ${self.attributes vertical }]
            [?<operations> ${self.operations vertical  }]
            [?<states> ${self.states vertical terminator [;] }]
            [?<invariants> ${self.invariants vertical terminator [;] }]
        <endassociationclass>
        ]
}

AssociationEnd {
        [[?${self.visibility}] ${self.baseType}.${self.name}${self.multiplicity}]
}

Attribute {
        [
        [?${self.visibility}] ${self.name}[?${self.multiplicity}] : ${self.type} ;
            [?init ${self.init}]
            [?derive ${self.derive}]
        ]
}

UmlClass {
        [
        [?${self.visibility}] ${self.isAbstract [<abstract>]} <class> ${self.name}
        [?<specializes> ${self.generalizations horizontal separator [, ] }]
        [?<implements> ${self.interfaces horizontal separator [, ] }]
            [?<attributes> ${self.attributes vertical  }]
            [?<operations> ${self.operations vertical  }]
            [?<states> ${self.states vertical terminator [;] }]
            [?<invariants> ${self.invariants vertical terminator [;] }]
        <endclass>
        ]
}

//concept CollectionType {
//    reference elementType: IClassifier;
//    metatype: CollectionMetaType;
//    isSet: boolean;
//    isOrderedSet: boolean;
//    isBag: boolean;
//    isSequence: boolean;
//}
//limited CollectionMetaType {
//    COLLECTION 		= { name: "Collection" }
//    SET 			= { name: "Set" }
//    ORDEREDSET 		= { name: "OrderedSet" }
//    BAG 			= { name: "Bag" }
//    SEQUENCE 		= { name: "Sequence" }
//}
DataType {
        [
        [?${self.visibility}] <datatype> ${self.name}
        [?<specializes> ${self.generalizations horizontal separator [, ] }]
        [?<implements> ${self.interfaces horizontal separator [, ] }]
            [?<attributes> ${self.attributes vertical  }]
            [?<operations> ${self.operations vertical  }]
            [?<invariants> ${self.invariants vertical terminator [;] }]
        <enddatatype>
        ]
}

EnumerationType {
        [
        [?${self.visibility}] <enumeration> ${self.name}
            <values> ${self.literals vertical terminator [;] }
        <endenumeration>
        ]
}

EnumLiteral {
            [${self.name}]
}

UmlInterface  {
        [
        [?${self.visibility}] <interface> ${self.name}
        [?<specializes> ${self.generalizations horizontal separator [, ] }]
            [?<attributes> ${self.attributes vertical }]
            [?<operations> ${self.operations vertical  }]
            [?<invariants> ${self.invariants vertical terminator [;] }]
        <endinterface>
        ]
}

MultiplicityKind {
 [\[ ${self.lowerBound}[?..${self.upperBound}]\]]
}
NumberUpperBound {
 [${self.value}]
}
StarUpperBound {
 [${self.value [*]}]
}

Operation {
    [
    [?${self.visibility}] ${self.name} ( [?${self.parameters horizontal separator [, ]}] ) [?: ${self.returnType}] ;
        [?${self.pre vertical }]
        [?${self.post vertical }]
    ]
}

UmlPackage {
        [
        <package> ${self.name}
        [?${ self.imports vertical  }]
            ${ self.classifiers vertical  }
        <associations>
            ${ self.associations vertical terminator [;] }
        <endpackage>
        ]
}

Parameter {
        [[?${self.directionKind}] ${self.name} : ${self.type}]
}

OclPostStatement {
        [post [?${self.name} :] ${self.expr}]
}
OclPreStatement {
    [pre [?${self.name} :] ${self.expr}]
}
OclStatement {
    [[?${self.name} :] ${self.expr}]
}

//concept PrimitiveType base DataType {
//}
//concept State implements IPackagableElement {
//    reference owner: Operation;
//    subStates: State[];
//    reference enclosingState: State;
//}
//concept StructuralFeature implements IPackagableElement {
//    reference type: IClassifier;
//    reference owner: IClassifier;
//    multiplicity: MultiplicityKind;
//    isOrdered: boolean;
//    isDerived: boolean;
//    isUnique: boolean;
//    isComposite: boolean;
//    isAggregate: boolean;
//    hasClassScope: boolean;
//}
//concept TupleType base DataType {
//    parts: VariableDeclaration[];
//}
//concept VariableDeclaration implements IModelElement {
//    reference type: IClassifier;
//    // initExpression: OclExpression;
//    isIteratorVar: boolean;
//}
//VisibilityKind {
// [${self.visibility}]
//}
// for limited concepts
