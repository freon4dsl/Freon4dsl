// this part contains all metamodel elements that form the connection between UML and OCL
language octopus

modelunit OclPart {
    name: identifier;
    constraints: OclContext[];
}
/**
 * IModelElementReference : because OCL expressions may express initial values etc. of
 * inherited elements, we must record not only the element itself, but also the subclass
 * in which the expression was encountered. Objects implementing this interface do exactly
 * that.
 */
interface IModelElementReference {
	/**
	 * The value of surroundingClassifier is determined as follows:
	 *  If the model element is a classifier, then the value is the model element.
	 *  If the model element is a non-inherited feature, then the value is the owner of this feature.
	 *  If the model element is an inherited feature, then the value is the classifier that inherits the feature and
	 *  where the OCl context was encoutered.
	 */
    reference surroundingClassifier?: IClassifier;

    reference feature: IModelElement; // the model element that is referenced.
    isInheritedFeature: boolean; // true if 'getModelElement().getOwner()' is not equal to 'getSurroundingClassifier()'.
}

concept OclContext implements IModelElement {
    owningModelelement: IModelElementReference; // the element to which the OCL expression is attached.
    isDefinition: boolean; // true if the OCL expression defines an attribute or operation.
    reference definedOperation?: Operation; // the operation that is defined in the OCL expression using the
                                            // def construct.
    reference definedAttribute?: Attribute; // the attribute that is defined in the OCL expression using the
                                            // def construct.
    expression: OclExpression; // The OCL expression itself.
//    usageType: OclUsageType; // The role that the OCL plays. E.g. invariant, precondition, init expression, derivation rule, etc.
}
