language Demo

model Demo {
    name: identifier;
    models: DemoModel[];
}

modelunit DemoModel {
    main?: DemoEntity;
    functions: DemoFunction[];
    name: identifier;
    private entities: DemoEntity[];
    private types: Type[];
    private type?: Type;
}
interface BaseType {
    private name: identifier;
    private baseInterface_attr: number;
}
interface X {
}
interface Type base BaseType, X {
    private simpleprop: string;
    private int_attrs: DemoAttribute[];
    private int_functions: DemoFunction[];
    private reference baseInterface?: DemoEntity;
}

abstract concept Nothing {
    private x: string;
}

concept DemoEntity base Nothing implements Type {
    private attributes: DemoAttribute[];
    private entAttributes: DemoAttributeWithEntityType[];
    private functions: DemoFunction[];
    private reference baseEntity?: DemoEntity;
}

limited DemoAttributeType implements BaseType {
    private name: identifier;
    private extra: number;
    String = { name: "String", "extra": 199}
    Integer = { "name": "Integer", "extra": 240261}
    Boolean = { "name": "Boolean", "extra": 5479}
    ANY = { "name": "ANY", "extra": 456}
}
expression DemoAbsExpression base DemoExpression {
    private expr: DemoExpression;
}

concept DemoFunction {
    name: identifier;
    private reference declaredType : BaseType;
    private expression: DemoExpression;
    private parameters: DemoVariable[];
}
concept DemoAttribute {
    private reference declaredType: DemoAttributeType;
    private name: identifier;
}

concept DemoAttributeWithEntityType {
    private reference declaredType: DemoEntity;
    private name: identifier;
}

concept DemoVariable {
    private name: identifier;
    private reference declaredType: DemoEntity;
}

abstract expression DemoExpression {
    private appliedfeature?: AppliedFeature;
}

abstract concept AppliedFeature {
    private appliedfeature?: AppliedFeature;
}

concept DemoAttributeRef base AppliedFeature {
    private reference attribute: DemoAttributeWithEntityType;
}

expression DemoVariableRef base DemoExpression {
    private reference variable: DemoVariable;
}

abstract expression DemoLiteralExpression base DemoExpression {}

expression DemoStringLiteralExpression base DemoLiteralExpression {
    private value: string;
}

expression DemoNumberLiteralExpression base DemoLiteralExpression {
    private value: number;
}

expression DemoBooleanLiteralExpression base DemoLiteralExpression {
    private value: boolean;
}

abstract binary expression DemoBinaryExpression base DemoExpression {
    private left: DemoExpression;
    private right: DemoExpression;
}

binary expression DemoMultiplyExpression base DemoBinaryExpression {
    priority = 8;
}

binary expression DemoPlusExpression base DemoBinaryExpression {
    priority = 4;
}

binary expression DemoDivideExpression base DemoBinaryExpression {
    priority = 8;
}

binary expression DemoAndExpression base DemoBinaryExpression {
    priority = 1;
}

binary expression DemoOrExpression base DemoBinaryExpression {
    priority = 1;
}

abstract binary expression DemoComparisonExpression base DemoBinaryExpression {
}

binary expression DemoLessThenExpression base DemoComparisonExpression {
    priority = 10;
}

binary expression DemoGreaterThenExpression base DemoComparisonExpression {
    priority = 10;
}

binary expression DemoEqualsExpression base DemoComparisonExpression {
    priority = 10;
}

expression DemoFunctionCallExpression base DemoExpression {
    private reference functionDefinition: DemoFunction;
}

expression DemoIfExpression base DemoExpression {
    private condition: DemoExpression;
    private whenTrue: DemoExpression;
    private whenFalse: DemoExpression;
}

