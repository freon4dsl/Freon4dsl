// Generated by the ProjectIt Language Generator.
import { PiError, PiErrorSeverity } from "@projectit/core";
import { ProjectYDefaultWorker } from "../utils/gen/ProjectYDefaultWorker";
import { ProjectYCheckerInterface } from "./gen/ProjectYValidator";
import { ExpWithType } from "../language/gen";
import { ProjectYTyper } from "../typer/gen";
import { ProjectYEnvironment } from "../config/gen/ProjectYEnvironment";

export class CustomProjectYValidator extends ProjectYDefaultWorker implements ProjectYCheckerInterface {
    errorList: PiError[] = [];
    public execBeforeExpWithType(modelelement: ExpWithType): boolean {
        let hasFatalError: boolean = false;
        const typer = new ProjectYTyper();
        const writer = ProjectYEnvironment.getInstance().writer;
        // typecheck equalsType (self.expr, self.type)
        if (!typer.equalsType(modelelement.expr, modelelement.type)) {
            this.errorList.push(
                new PiError(
                    "Type '" +
                    typer.inferType(modelelement.expr)?.toPiString(writer) +
                    "' of [" +
                    writer.writeNameOnly(modelelement.expr) +
                    "] is not equal to " +
                    writer.writeToString(modelelement.type),
                    modelelement.expr,
                    writer.writeNameOnly(modelelement.expr),
                    PiErrorSeverity.Error
                )
            );
            hasFatalError = true;
        }
        return hasFatalError;
    }
}
