language TestParser

// focuses on the different type of properties and how to parse them

// TEST PROPERTIES WITH PRIMITVE TYPES
model TestParserModel {
    name: identifier;
    prim: PrimitivesTest;
    primWith: PrimsWithKeywordTest;
    lim: LimitedTest;
    ref: RefsTest;
    parts: PartsTest;
}

modelunit PrimitivesTest {
    name: identifier;
    prim: Prim;
    primExtra: PrimsWithExtraText;
    separator: PrimsWithSeparator;
    terminator: PrimsWithTerminator;
    // initiator: PrimsWithInitiator;
    // the following are place holders for the case where
    // one or more primitives are not present - see .edit def
    separatorOpt: PrimsWithSeparator;
    terminatorOpt: PrimsWithTerminator;
    // initiatorOpt: PrimsWithInitiator;
    file-extension = "pri";
}
concept Prim {
    primIdentifier: identifier;
    primNumber: number;
    primString: string;
    primBoolean: boolean;
    primListIdentifier: identifier[];
    primListNumber: number[];
    primListString: string[];
    primListBoolean: boolean[];
}
concept PrimsWithExtraText {
    primIdentifierWithExtra: identifier;
    primNumberWithExtra: number;
    primStringWithExtra: string;
    primBooleanWithExtra: boolean;
    primListIdentifierWithExtra: identifier[];
    primListNumberWithExtra: number[];
    primListStringWithExtra: string[];
    primListBooleanWithExtra: boolean[];
}
concept PrimsWithSeparator {
    primListIdentifierSeparator: identifier[];
    primListNumberSeparator: number[];
    primListStringSeparator: string[];
    primListBooleanSeparator: boolean[];
}
concept PrimsWithTerminator {
    primListIdentifierTerminator: identifier[];
    primListNumberTerminator: number[];
    primListStringTerminator: string[];
    primListBooleanTerminator: boolean[];
}
concept PrimsWithInitiator {
    primListIdentifierInitiator: identifier[];
    primListNumberInitiator: number[];
    primListStringInitiator: string[];
    primListBooleanInitiator: boolean[];
}

modelunit PrimsWithKeywordTest {
    name: identifier;
    primWith: PrimKeyword[];
    file-extension = "wit";
}

concept PrimKeyword {
    primBoolean: boolean;
}

// TEST PROPERTIES WITH TYPES THAT ARE LIMITED CONCEPTS
modelunit LimitedTest {
    name: identifier;
    limitedNonOpt: LimitedNonOptional;
    limitedOpt: LimitedOptional;
    limitedOpt2: LimitedOptional;
    file-extension = "lim";
}

concept LimitedNonOptional {
    visibility: VisibilityKind;
    visMulti: VisibilityKind[];
    visWithExtra: VisibilityKind;
    visMultiWithExtra: VisibilityKind[];
    other: OtherLimited;
    otherMulti: OtherLimited[];
}

concept LimitedOptional {
    visibility?: VisibilityKind;
    visMulti: VisibilityKind[];
    visWithExtra?: VisibilityKind;
    visMultiWithExtra: VisibilityKind[];
}

limited VisibilityKind {
	PUBLIC = { name: "+" }
	PRIVATE = { name: "-" }
	PROTECTED = { name: "#" }
}

limited OtherLimited {
    FIRST; SECOND;
}

// TEST PROPERTIES THAT ARE PARTS WHICH HAVE CONCEPT TYPES
modelunit PartsTest {
    name: identifier;
    directParts: WithDirectParts;
    partsOfParts?: WithSubSubParts;
    file-extension = "par";
}

concept WithDirectParts {
    part: PartConcept;
    optPart?: PartConcept;
    partList: PartConcept[];
    optList: PartConcept[];
}

concept PartConcept {
    visibility: VisibilityKind;
    content: string;
    optContent: number;
}

concept WithSubSubParts {
    part: SubConcept;
    optPart?: SubConcept;
    partList: SubConcept[];
    optList: SubConcept[];
}

concept SubConcept {
    normalSub: WithDirectParts;
    optionalSub?: WithDirectParts;
    listSub: WithDirectParts[];
    optListSub: WithDirectParts[];
}

// TEST PROPERTIES THAT ARE REFERENCES TO CONCEPT TYPES
modelunit RefsTest {
    name: identifier;
    directRefs: WithDirectRefs;
    indirectRefs?: WithSubSubRefs;
    withSeparator?: RefsWithSeparator;
    file-extension = "ref";
}

concept WithDirectRefs {
    reference ref: RefConcept;
    reference optRef?: RefConcept;
    reference refList: RefConcept[];
    reference optRefList: RefConcept[];
}

concept RefConcept {
    name: identifier;
}

concept WithSubSubRefs {
    part: WithDirectRefs;
    optPart?: WithDirectRefs;
    partList: WithDirectRefs[];
    optList: WithDirectRefs[];
}

concept RefsWithSeparator {
    partList: WithDirectRefs[];
    optList: WithDirectRefs[];
}


