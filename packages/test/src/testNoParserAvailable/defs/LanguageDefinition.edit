// This is an editor definiton that is intentionally wrong
// it should cause an error in the generation of the grammar
// for this purpose we have eliminated all keywords
editor default

Attribute {
    [
        ${self.name} ${self.declaredType}
    ]
}

Entity {
     [
        ${self.name} [? ${self.baseEntity}] {
            ${self.attributes vertical }
            ${self.methods vertical }
        }
    ]
    trigger = "entity"
}

ExModel {
        [
        ${self.name}
            ${self.entities
                vertical              
            }
        ${self.methods vertical  }
        ]
}

Method {
     [
        ${self.name} ${self.parameters separator[,] } ${self.declaredType} {
            ${self.body}
        }
    ]
}

Parameter {
     [
        ${self.name} ${self.declaredType}
    ]
}

MethodCallExpression {
        [
        ${self.methodDefinition} ${self.args separator[,] }
        ]
    trigger = "method"
}

SumExpression {
     [
        ${self.variable}  ${self.from}  ${self.to}  ${self.body}
    ]
    trigger = "sum"
}

LoopVariableRef {
     [ ${self.variable} ]
}

LoopVariable {
     [ ${self.name} ]
    trigger =    "var"
}


NumberLiteralExpression {
        [${self.value}]
}

StringLiteralExpression {
        [
        ${self.value}
        ]
    trigger = "'"
}

PlusExpression {
    symbol = "+"
}

MultiplyExpression {
    symbol = "*"
}

DivideExpression {
    symbol = "/"
}

LessThenExpression {
    symbol = "<"
}

OrExpression {
    symbol = "or"
}
AndExpression {
    symbol = "and"
}
GreaterThenExpression {
    symbol = ">"
}
EqualsExpression {
    symbol = "=="
}

BooleanLiteralExpression {
     [ ${self.value} ]
    trigger = "boolean"
}


AttributeRef {
     [ ${self.attribute} ]
    trigger = "attribute"
}

ParameterRef {
     [ ${self.parameter}  ${self.appliedfeature} ]
}

//IfExpression {
//     IfExpression
//        [
//        if (${self.condition}) then
//            ${self.whenTrue}
//        else
//            ${self.whenFalse}
//        endif
//        ]
//    trigger = "if"
//}

AbsExpression {
    [
        abs( ${self.expr} )
    ]
}

IfExpression {
        [
        ${ self.condition } ? ${ self.whenTrue } : ${self.whenFalse}
        ]
    trigger = "if"
}
