// Generated by the Freon Language Generator.
import { FreNode, FreType, FreTyper, AstType, FreLanguage } from "@freon4dsl/core";
import { EuroType, MultiplyExpression, NumberType, ParameterRef, PercentageType } from "../language/gen";

/**
 * Class 'CustomDocuProjectTyperPart' is meant to be a convient place to add any
 * custom code for type checking.
 */
export class CustomDocuProjectTyperPart implements FreTyper {
    mainTyper: FreTyper;
    static fromValidator: boolean = false;

    isType(modelelement: FreNode): boolean | null {
        return null;
    }

    inferType(modelelement: FreNode): FreType | null {
        let result: FreType = null;
        if (CustomDocuProjectTyperPart.fromValidator) {
            if (FreLanguage.getInstance().metaConformsToType(modelelement, "ParameterRef")) {
                if (!!(modelelement as ParameterRef)?.attribute) {
                    result = this.mainTyper.inferType(
                        (modelelement as ParameterRef).attribute
                    );
                    return result;
                }
            }
        }
        if (FreLanguage.getInstance().metaConformsToType(modelelement, "MultiplyExpression")) {
            const leftType = this.mainTyper.inferType((modelelement as MultiplyExpression).left);
            const rightType = this.mainTyper.inferType((modelelement as MultiplyExpression).right);
            // see if we are multiplying a percentage and an EUR
            if ((leftType.toAstElement() === PercentageType.Percentage && rightType.toAstElement() === EuroType.EUR)
            || (rightType.toAstElement() === PercentageType.Percentage && leftType.toAstElement() === EuroType.EUR)) {
                return AstType.create({ astElement: EuroType.EUR });
            }
            // see if we are multiplying a percentage and a number
            if ((leftType.toAstElement() === PercentageType.Percentage && rightType.toAstElement() === NumberType.Number)
                || (rightType.toAstElement() === PercentageType.Percentage && leftType.toAstElement() === NumberType.Number)) {
                return AstType.create({ astElement: PercentageType.Percentage });
            }
        }
        return null;
    }

    equals(type1: FreType, type2: FreType): boolean | null {
        return null;
    }

    conforms(type1: FreType, type2: FreType): boolean | null {
        return null;
    }

    conformsList(typelist1: FreType[], typelist2: FreType[]): boolean | null {
        return null;
    }

    commonSuper(typelist: FreType[]): FreType | null {
        return null;
    }

    public getSuperTypes(type: FreType): FreType[] | null {
        return null;
    }
}
