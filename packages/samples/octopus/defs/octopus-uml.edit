editor default

UmlPart {
        [${umlPackage}]
}

// the uml concepts
Association {
        [${end1} <-> ${end2}]
}
IClassifier {
        [
        [?<attributes>  ${attributes vertical terminator [;] }]
        [?<operations>  ${operations vertical terminator [;] }]
        [?<states>      ${states     vertical separator [;] }]
        [?<invariants>  ${invariants vertical terminator [;] }]
        ]
}
AssociationClass {
        [
        [?${visibility}] <associationclass> ${name}
        ${end1} <-> ${end2}
        [=> IClassifier ]
        <endassociationclass>
        ]
}
AssociationEnd {
        [[?${visibility}] ${baseType}.${name}${multiplicity}]
}
Attribute {
        [
        [?${visibility}] ${name}[?${multiplicity}] : ${type}
            [?init ${init}]
            [?derive ${derive}]
        ]
}
UmlClass {
    [
    [?${visibility}] ${isAbstract [<abstract>]} <class> ${name}
    [?<specializes> ${generalizations horizontal separator [, ] }]
    [?<implements> ${interfaces horizontal separator [, ] }]
    [=> IClassifier]
    <endclass>
    ]
}
DataType {
        [
        [?${visibility}] <datatype> ${name}
        [?<specializes> ${generalizations horizontal separator [, ] }]
        [?<implements> ${interfaces horizontal separator [, ] }]
        [=>IClassifier]
        <enddatatype>
        ]
}
EnumerationType {
        [
        [?${visibility}] <enumeration> ${name}
        <values> ${literals vertical terminator [;] }
        <endenumeration>
        ]
}

EnumLiteral {
            [${name}]
}

UmlInterface  {
        [
        [?${visibility}] <interface> ${name}
        [?<specializes> ${generalizations horizontal separator [, ] }]
        [?<attributes> ${attributes vertical terminator [;]}]
        [?<operations> ${operations vertical terminator [;] }]
        [?<invariants> ${invariants vertical terminator [;] }]
        <endinterface>
        ]
}

MultiplicityKind {
 [\[ ${lowerBound}[?..${upperBound}]\]]
}
NumberUpperBound {
 [${value}]
}
StarUpperBound {
 [${value[*]}]
}

Operation {
    [
    [?${visibility}] ${name} ( [?${parameters horizontal separator [, ]}] ) [?: ${returnType}]
        [?${pre vertical}]
        [?${post vertical}]
    ]
}

UmlPackage {
// TODO subprojection imports removes newline between name and classifiers
        [
        <package> ${name}
        [?${ imports vertical}]
        ${ classifiers vertical}
        <associations>
        ${ associations vertical terminator [;] }
        <endpackage>
        ]
}

Parameter {

        [[?${directionKind}] ${name} : ${type}]
}

OclPostStatement {

        [post [?${name} :] ${expr}]
}
OclPreStatement {

    [pre [?${name} :] ${expr}]
}
OclStatement {

    [[?${name} :] ${expr}]
}

//concept PrimitiveType base DataType {
//}
//concept State implements IPackagableElement {
//    reference owner: Operation;
//    subStates: State[];
//    reference enclosingState: State;
//}
//concept StructuralFeature implements IPackagableElement {
//    reference type: IClassifier;
//    reference owner: IClassifier;
//    multiplicity: MultiplicityKind;
//    isOrdered: boolean;
//    isDerived: boolean;
//    isUnique: boolean;
//    isComposite: boolean;
//    isAggregate: boolean;
//    hasClassScope: boolean;
//}
//concept TupleType base DataType {
//    parts: VariableDeclaration[];
//}
//concept VariableDeclaration implements IModelElement {
//    reference type: IClassifier;
//    // initExpression: OclExpression;
//    isIteratorVar: boolean;
//}
