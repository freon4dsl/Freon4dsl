language Example

interface BaseType {
    name: identifier;
}

limited PrimitiveType implements Type {
    name: identifier;
    extra: number;
    String = { "extra": 199}
    Integer = { "extra": 240261}
    Boolean = { "extra": 5479}
    ANY = { name: "++", "extra": 456}
}

concept DateType implements Type {
}
abstract expression Expression {
    appliedfeature?: AppliedFeature;
}

abstract expression LiteralExpression base Expression {}

expression StringLiteralExpression base LiteralExpression {
    value: string;
}

expression NumberLiteralExpression base LiteralExpression   {
    value: number;
}

expression BooleanLiteralExpression base LiteralExpression {
    value: boolean;
}

expression AbsExpression base Expression {
    expr: Expression;
}

abstract concept AppliedFeature {
    appliedfeature?: AppliedFeature;
}

concept LoopVariable {
    name: identifier;
}

expression GroupedExpression base Expression {
    inner: Expression;
}

expression LoopVariableRef base Expression {
    reference variable: LoopVariable;
}

expression SumExpression base Expression {
    variable: LoopVariable;
    from: Expression;
    to  : Expression;
    body: Expression;
}

expression IfExpression base Expression {
    condition: Expression;
    whenTrue: Expression;
    whenFalse: Expression;
}

////////////////////////////////////
//    Binary Expressions
////////////////////////////////////
abstract binary expression BinaryExpression base Expression {
    left: Expression;
    right: Expression;
}

binary expression MultiplyExpression base BinaryExpression {
    priority = 8;
}

binary expression PlusExpression base BinaryExpression {
    priority = 4;
}

binary expression DivideExpression base BinaryExpression {
    priority = 8;
}

binary expression AndExpression base BinaryExpression {
    priority = 1;
}

binary expression OrExpression base BinaryExpression {
    priority = 1;
}

abstract binary expression ComparisonExpression base BinaryExpression {
}

binary expression LessThenExpression base ComparisonExpression {
    priority = 2;
}

binary expression GreaterThenExpression base ComparisonExpression {
    priority = 2;
}

binary expression EqualsExpression base ComparisonExpression {
    priority = 2;
}

