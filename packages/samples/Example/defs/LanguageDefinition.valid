validator ExampleValidator for language Example

ExampleUnit {
    notEmpty self.entities;
    isunique name in self.entities;
    notEmpty self.methods;
    isunique name in self.methods;
    validIdentifier; // default is 'name'
}

Entity {
//    notEmpty self.attributes;
    isunique name in self.attributes;
//    notEmpty self.methods;
    isunique name in self.methods;
    validIdentifier
    {
        message: "De naam ${self.name} is geen correcte identifier",
        severity: error
    }
    ;
}

//Attribute {
//    validIdentifier self.name;
//}


Method {
    typecheck conformsTo (self.body, self.declaredType);
    isunique name in self.parameters;
    validIdentifier ;
}

Parameter {
    validIdentifier ;
}

OrExpression {
    typecheck equalsType( self.left, PrimitiveType:Boolean );
    typecheck equalsType( self.right, PrimitiveType:Boolean );
}
AbsExpression {
    typecheck equalsType( self.expr, PrimitiveType:Integer );
}

MultiplyExpression {
    typecheck equalsType( self.left, PrimitiveType:Integer );
    typecheck equalsType( self.right, PrimitiveType:Integer );
}

PlusExpression {
    typecheck equalsType( self.left, PrimitiveType:Integer );
    typecheck equalsType( self.right, PrimitiveType:Integer );
    typecheck conformsTo( self.left, self.right );
}

DivideExpression {
    typecheck equalsType( self.left, PrimitiveType:Integer );
    typecheck equalsType( self.right, PrimitiveType:Integer );
}

AndExpression {
    typecheck equalsType( self.left, PrimitiveType:Boolean );
    typecheck equalsType( self.right, PrimitiveType:Boolean );
}

ComparisonExpression {
    typecheck equalsType( self.left, self.right );
}

IfExpression {
    typecheck equalsType( self.condition, PrimitiveType:Boolean );
    typecheck conformsTo( self.whenTrue, self.whenFalse );
}

