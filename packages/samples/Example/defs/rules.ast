language Example

//model RulesModel {
//    name: identifier;
//    entity: Data[];
//    rules: Rules[];
//}

modelunit Rules {
    name: identifier;
//    reference imports: Data;
    reference forEntity: Entity;
    rules: Rule[];
    file-extension = "rules";
}

abstract concept Rule {
    name: identifier;
    description: string;
}

abstract concept Statement {
}

concept CheckingRule base Rule {
    check: Expression;
}

concept IfThenElseRule base Rule {
    IfStatement: IfStatement;
}

concept IfStatement base Statement {
    Condition: Expression;
    ThenStatements: Statement[];
    ElseStatements: Statement[];
}

concept SetValue base Statement {
    reference attribute: Attribute;
    value: Expression;
}

//abstract expression RuleExpression {}

//expression AttributeRef base RuleExpression {
//    reference attr: Attribute;
//}
//
expression HasNoValue base Expression {
    reference attribute: Attribute;
}

expression HasAnyValue base Expression {
    reference attribute: Attribute;
}

//expression CheckingRuleCall base RuleExpression {
//    reference rule: CheckingRule;
//}
//
//expression FunctionCall base RuleExpression {
//    reference func: RFunction;
//    arguments: RuleExpression[];
//}

//expression ParameterRef base RuleExpression {
//    reference par: Parameter;
//}

//////////////////// Literal expressions ////////////////////////
//expression NumberLiteral base RuleExpression {
//    value: string;
//}
//
expression DateLiteral base Expression {
    day: string;
    month: Month;
    year: string;
}

limited Month {
    name: identifier;
    nr: number;

    January   = { name: "January",   nr: 1 }
    February  = { name: "February",  nr:  2 }
    March     = { name: "March",     nr:  3 }
    April     = { name: "April",     nr:  4 }
    May       = { name: "May",       nr:  5 }
    June      = { name: "June",      nr:  6 }
    July      = { name: "July",      nr:  7 }
    August    = { name: "August",    nr:  8 }
    September = { name: "September", nr:  9 }
    October   = { name: "October",   nr:  10 }
    November  = { name: "November",  nr:  11 }
    December  = { name: "December",  nr:  12 }
}
////////////////////// Binary expressions ////////////////////////
//abstract binary expression BinaryExpression base RuleExpression {
//    left: RuleExpression;
//    right: RuleExpression;
//}
//
//binary expression IsEqualTo base BinaryExpression {
//    priority = 10;
//}
//
//binary expression IsNotEqualTo base BinaryExpression {
//    priority = 10;
//}
//
//binary expression IsAfter base BinaryExpression {
//    priority = 10;
//}
//
//binary expression IsAfterOrEqualTo base BinaryExpression {
//    priority = 10;
//}
//
//binary expression IsBefore base BinaryExpression {
//    priority = 10;
//}
//
//binary expression IsBeforeOrEqualTo base BinaryExpression {
//    priority = 10;
//}
//
//binary expression And base BinaryExpression {
//    priority = 5;
//}
//
//binary expression Or base BinaryExpression {
//    priority = 5;
//}
//
//binary expression Plus base BinaryExpression {
//    priority = 15;
//}
//
//binary expression Multiply base BinaryExpression {
//    priority = 20;
//}
