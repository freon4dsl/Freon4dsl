language RulesLanguage

model RulesModel {
    name: identifier;
    entity: Data[];
    rules: Rules[];
}

modelunit Rules {
    name: identifier;
    reference imports: Data;
    reference forEntity: Entity;
    Rules: Rule[];
}

abstract concept Rule {
    name: identifier;
    description: string;
}

abstract concept Statement {
}

concept CheckingRule base Rule {
    check: RuleExpression;
}

concept IfThenElseRule base Rule {
    IfStatement: IfStatement;
}

concept IfStatement base Statement {
    name: string;
    Condition: RuleExpression;
    ThenStatements: Statement[];
    ElseStatements: Statement[];
}

concept SetValue base Statement {
    reference attribute: Attribute;
    value: RuleExpression;
}

abstract expression RuleExpression {}

expression AttributeRef base RuleExpression {
    reference attr: Attribute;
}

expression HasNoValue base RuleExpression {
    reference attribute: Attribute;
}

expression HasAnyValue base RuleExpression {
    reference attribute: Attribute;
}

expression CheckingRuleCall base RuleExpression {
    reference rule: CheckingRule;
}

//////////////////// Literal expressions ////////////////////////
expression NumberLiteral {
    value: string;
}

expression DateLiteral base RuleExpression {
    day: string;
    month: Month;
    year: string;
}

limited Month {
    name: identifier;
    nr: number;

    January   = { name: "January",   nr: 1 }
    February  = { name: "February",  nr:  2 }
    March     = { name: "March",     nr:  3 }
    April     = { name: "April",     nr:  4 }
    May       = { name: "May",       nr:  5 }
    June      = { name: "June",      nr:  6 }
    July      = { name: "July",      nr:  7 }
    August    = { name: "August",    nr:  8 }
    September = { name: "September", nr:  9 }
    October   = { name: "October",   nr:  10 }
    November  = { name: "November",  nr:  11 }
    December  = { name: "December",  nr:  12 }
}
//////////////////// Binary expressions ////////////////////////
abstract binary expression BinaryExpression base RuleExpression {
    left: RuleExpression;
    right: RuleExpression;
}

binary expression IsEqualTo base BinaryExpression {
    priority = 10;
}

binary expression IsNotEqualTo base BinaryExpression {
    priority = 10;
}

binary expression IsAfter base BinaryExpression {
    priority = 10;
}

binary expression IsAfterOrEqualTo base BinaryExpression {
    priority = 10;
}

binary expression IsBefore base BinaryExpression {
    priority = 10;
}

binary expression IsBeforeOrEqualTo base BinaryExpression {
    priority = 10;
}

binary expression And base BinaryExpression {
    priority = 5;
}

binary expression Or base BinaryExpression {
    priority = 5;
}
