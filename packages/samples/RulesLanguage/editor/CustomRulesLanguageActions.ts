// Generated by the ProjectIt Language Generator.
import {
    AliasBox,
    Box, ENTER,
    EXPRESSION_SYMBOL, isString,
    MetaKey,
    PiActions, PiActionTrigger, PiCaret,
    PiCreateBinaryExpressionAction,
    PiCustomAction, PiEditor, PiElement, RoleProvider,
    SPACEBAR
} from "@freon4dsl/core";
import { NumberLiteral } from "../language/gen/index";

/**
 * Class CustomRulesLanguageActions provides an entry point for the language engineer to
 * define custom build additions to the editor.
 * These custom build additions are merged with the default and definition-based editor parts
 * in a three-way manner. For each modelelement,
 * (1) if a custom build creator/behavior is present, this is used,
 * (2) if a creator/behavior based on the editor definition is present, this is used,
 * (3) if neither (1) nor (2) yields a result, the default is used.
 */
export class CustomRulesLanguageActions implements PiActions {
    binaryExpressionActions: PiCreateBinaryExpressionAction[] = MANUAL_BINARY_EXPRESSION_ACTIONS;
    customActions: PiCustomAction[] = MANUAL_CUSTOM_ACTIONS;
}

export const MANUAL_BINARY_EXPRESSION_ACTIONS: PiCreateBinaryExpressionAction[] = [
    // Add your own custom binary expression actions here
];

export const MANUAL_CUSTOM_ACTIONS: PiCustomAction[] = [
    // Add your own custom behavior here

    PiCustomAction.create({

        activeInBoxRoles: [
            "Method-body",
            "AbsExpression-expr",
            "SumExpression-from",
            "SumExpression-to",
            "SumExpression-body",
            "IfExpression-condition",
            "IfExpression-whenTrue",
            "IfExpression-whenFalse",
            "PiBinaryExpression-left",
            "PiBinaryExpression-right",
            "MultiplyExpression-left",
            "MultiplyExpression-right",
            "Plus-left",
            "Plus-right",
            "DivideExpression-left",
            "DivideExpression-right",
            "AndExpression-left",
            "AndExpression-right",
            "OrExpression-left",
            "OrExpression-right",
            "ComparisonExpression-left",
            "ComparisonExpression-right",
            "LessThenExpression-left",
            "LessThenExpression-right",
            "GreaterThenExpression-left",
            "GreaterThenExpression-right",
            "EqualsExpression-left",
            "EqualsExpression-right"
        ],
        trigger: /[0-9]/,
        action: (box: Box, trigger: PiActionTrigger, editor: PiEditor) => {
            const parent = box.element;
            const x = new NumberLiteral();
            if( isString(trigger) ) {
                x.value = trigger;
            }
            parent[(box as AliasBox).propertyName] = x;
            return x;
        },
        boxRoleToSelect: RoleProvider.property("NumberLiteral", "value", "textbox"),
        caretPosition: PiCaret.RIGHT_MOST
    })
];
