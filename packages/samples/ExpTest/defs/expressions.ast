language ExpTest

model test {
    unit: Unit1;
    lang: PiStructureDef;
}

modelunit Unit1 {
    unitPart: Concept1;
    file-extension = "xxx";
}

concept Concept1 {
    exp: PitExp[];
}

abstract expression PitExp {
    content: identifier;
}

expression PitAppliedExp base PitExp {
    source: PitExp;
}
expression PitSelfExp base PitExp {
}
expression PitAnytypeExp base PitExp {
}
expression PitPropertyCallExp base PitExp {
    reference property: PitProperty;
}
concept PitProperty {
    name: identifier;
    type: identifier;
}
expression PitInstanceRef base PitExp {
    reference myLimited?: PiLimitedConcept;
    reference myInstance: PiInstance;
}
expression PitWhereExp base PitExp {
    otherType: PitProperty; // this object is not part of the AST, it is here to embody e.g. 'x: UnitOfMeasurement'
    conditions: PitStatement[];
}
abstract binary expression PitStatement base PitExp {
    left: PitExp;
    right: PitExp;
//    operand: PitStatementKind; // either 'equalsto' or 'conformsto'
}
binary expression PitEquals base PitStatement {
    priority = 8;
}
binary expression PitConforms base PitStatement {
    priority = 4;
}
expression PitFunctionCallExp base PitExp {
    calledFunction: identifier;
    // reference calledFunction: PitFunction;
    reference returnType?: PiClassifier;
    arguments: PitExp[];
}
