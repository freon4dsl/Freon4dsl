editor default

referenceSeparator [::]

// begin typer definition
PiTyperDef {[
    typer
    [?istype { ${self.types horizontal separator [, ]} }]
    ${self.typeConcepts}
    [?hastype { ${self.conceptsWithType horizontal separator [, ]} }]
    [?${self.anyTypeSpec}]
    ${self.classifierSpecs vertical}
    ]}
PitTypeConcept {[
    type ${self.name} [?base ${self.base}] {
        ${self.properties terminator[;]}
    }
]}
PitProperty {
    [${self.name} : ${self.type}]
}
PitClassifierSpec {[
    ${self.myClassifier} {
        ${self.rules}
    }
]}
PitAnyTypeSpec {[
    anytype {
        ${self.rules}
    }
]}
PitInferenceRule {
    [infertype ${self.exp};]
}
PitConformanceRule {
    [conformsto ${self.exp};]
}
PitEqualsRule {
    [equalsto ${self.exp};]
}
PitLimitedRule {
    [${self.exp};]
}
PitVarDecl {
    [${self.name} : ${self.type}]
}
PitPropInstance {
    [${self.property} : ${self.value}]
}

// expressions
PitPropertyCallExp {
    [${source}.${property}]
}
PitSelfExp {
    [self]
}
PitAnytypeExp {
    [anytype]
}
PitVarCallExp {
    [${self.variable}]
}
PitCreateExp {
    [${self.type} { ${self.propertyDefs separator[,] } }]
}
PitFunctionCallExp {
    [${self.calledFunction} ( ${self.arguments horizontal separator[, ]} )]
}
PitLimitedInstanceExp {
    [[?${myLimited}:]${myInstance}]
}
PitWhereExp {[
    ${self.variable} where {
        ${self.conditions terminator[;]}
    }
]}
PitEquals {
    symbol = "equalsto"
}
PitConforms {
    symbol = "conformsto"
}
