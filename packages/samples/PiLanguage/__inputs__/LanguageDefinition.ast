language Example

model Demo {
    name: identifier;
    units: ExampleUnit[];
}

modelunit ExampleUnit {
    name: identifier;
    entities: Entity[];
    methods: Method[];
    file-extension = "exm";
}
interface BaseType {
    name: identifier;
}
interface Type base BaseType {
}

concept Entity implements Type {
    attributes: Attribute[];
    methods: Method[];
    reference baseEntity?: Entity;
}

concept Method {
    name: identifier;
    reference declaredType : Type;
    body: ExExpression;
    parameters: Parameter[];
}

concept Attribute {
    reference declaredType: Type;
    name: identifier;
}

limited AttributeType implements Type {
    name: identifier;
    extra: number;
    String = { name: "String", extra: 199}
    Integer = { name: "Integer", extra: 240261}
    Boolean = { name: "Boolean", extra: 5479}
    ANY = { name: "ANY", extra: 456}
}

concept Parameter  {
    name: identifier;
    reference declaredType: Type;
}

////////////////////////////////////
//       Expressions
////////////////////////////////////

abstract expression ExExpression {
    appliedfeature?: AppliedFeature;
}

abstract expression LiteralExpression base ExExpression {}

expression StringLiteralExpression base LiteralExpression {
    value: string;
}

expression NumberLiteralExpression base LiteralExpression   {
    value: number;
}

expression BooleanLiteralExpression base LiteralExpression {
    value: boolean;
}

expression AbsExpression base ExExpression {
    expr: ExExpression;
}

abstract concept AppliedFeature {
    appliedfeature?: AppliedFeature;
}

concept AttributeRef base AppliedFeature {
    reference attribute: Attribute;
}

expression ParameterRef base ExExpression {
    reference parameter: Parameter;
}

concept LoopVariable {
    name: identifier;
}

expression GroupedExpression base ExExpression {
    inner: ExExpression;
}

expression LoopVariableRef base ExExpression {
    reference variable: LoopVariable;
}

expression SumExpression base ExExpression {
    variable: LoopVariable;
    from: ExExpression;
    to  : ExExpression;
    body: ExExpression;
}

expression MethodCallExpression base ExExpression {
    reference methodDefinition: Method;
    args: ExExpression[];
}

expression IfExpression base ExExpression {
    condition: ExExpression;
    whenTrue: ExExpression;
    whenFalse: ExExpression;
}

////////////////////////////////////
//    Binary ExExpressions
////////////////////////////////////
abstract binary expression BinaryExpression base ExExpression {
    left: ExExpression;
    right: ExExpression;
}

binary expression MultiplyExpression base BinaryExpression {
    priority = 8;
}

binary expression PlusExpression base BinaryExpression {
    priority = 4;
}

binary expression DivideExpression base BinaryExpression {
    priority = 8;
}

binary expression AndExpression base BinaryExpression {
    priority = 1;
}

binary expression OrExpression base BinaryExpression {
    priority = 1;
}

abstract binary expression ComparisonExpression base BinaryExpression {
}

binary expression LessThenExpression base ComparisonExpression {
    priority = 10;
}

binary expression GreaterThenExpression base ComparisonExpression {
    priority = 10;
}

binary expression EqualsExpression base ComparisonExpression {
    priority = 10;
}

