// This is a limited version of the openhab DSL for items
language openhab

model OpenHabModel {
    name: identifier;
    itemModels: ItemModel[];
//    ruleModels: RuleModel[];
}

modelunit ItemModel {
    name: identifier;
	items: ModelItem[];
}

abstract concept ModelItem {
    name: identifier;
    type: BaseModelItemType;
    reference groups: ModelGroup[];
    label: string;
//    state?: StateType;
}

concept ModelBaseItem base ModelItem {
//    icon?: Icon;
//    tags?: Tag[];
//    bindings: Binding[];
}

limited BaseModelItemType {
	Color;           // Description: Color information (RGB) Command or State Types: OnOff, IncreaseDecrease, Percent, HSB
    Contact;         // Description: Status of contacts, e.g. door/window contacts. Does not accept commands, only status updates. Command or State Types: OpenClosed
    DateTime;        // Description: Stores date and time Command or State Types: -
    Dimmer;          // Description: Percentage value for dimmers Command or State Types: OnOff, IncreaseDecrease, Percent
    Group;           // Description: Item to nest other items / collect them in groups Command or State Types: -
    Image;           // Description: Binary data of an image Command or State Types: -
    Location;        // Description: GPS coordinates Command or State Types: Point
    Number;          // Description: Values in number format Command or State Types: Decimal
    Player;          // Description: Allows control of players (e.g. audio players) Command or State Types: PlayPause, NextPrevious, RewindFastforward
    Rollershutter;   // Description: Roller shutter Item, typically used for blinds Command or State Types: UpDown, StopMove, Percent
    String;          // Description: Stores texts Command or State Types: String
    Switch;          // Description: Stores date and time Command or State Types: OnOff
}

concept ModelGroup base ModelItem {
    reference contents: ModelItem[];
    reference baseItem: ModelBaseItem;
    groupFunction: ModelGroupFunction;
}

concept ModelGroupFunction {
    groupFunctionName: ModelGroupFunctionName;
    args: Argument[];
}

concept Argument {
    name: identifier;
}

limited ModelGroupFunctionName {
	EQUALITY;
	AND;
	OR;
	NAND;
	NOR;
	AVG;
	SUM;
	MAX;
	MIN;
	COUNT;
	LATEST;
	EARLIEST;
}
/*
concept ModelBinding {
	type: string;
	configuration: string;
	properties: ModelProperty[];
}

concept ModelProperty {
    key: string;
    value: ValueType;
}

ValueType returns ecore::EJavaObject:
    STRING | NUMBER | BOOLEAN
}

BOOLEAN returns ecore::EBoolean:
    'true' | 'false'
}

NUMBER returns ecore::EBigDecimal:
    ID ('.' ID )?
}
*/
